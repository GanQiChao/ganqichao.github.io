<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GanQiChao&#39;s Blog</title>
  
  <subtitle>Tec</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-11-06T12:27:39.163Z</updated>
  <id>/</id>
  
  <author>
    <name>GanQiChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sdp 异常登记</title>
    <link href="/2017/11/06/sdp-exception-record/"/>
    <id>/2017/11/06/sdp-exception-record/</id>
    <published>2017-11-06T03:11:30.000Z</published>
    <updated>2017-11-06T12:27:39.163Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 页面编码</title>
    <link href="/2017/11/06/sdp-page/"/>
    <id>/2017/11/06/sdp-page/</id>
    <published>2017-11-06T03:11:17.000Z</published>
    <updated>2017-11-06T14:45:56.049Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>前端编码，依据页面可视元素和操作，编写系统操作步骤及页面说明。</p><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>分类（可选，如APP/WEB-）+界面名称（与原型设计界面一样）</td></tr><tr><td>名称</td><td>访问路由路径</td></tr><tr><td>页面</td><td>页面文件放置路径</td></tr><tr><td>原型</td><td>选择对应的原型设计</td></tr><tr><td>附件</td><td>上传相关文件</td></tr><tr><td>描述</td><td>详细叙述页面具体元素、操作、系统响应，<br>便于指导后续测试及系统操作手册编写</td></tr><tr><td>接口</td><td>页面使用到的接口，通过右边菜单选择<br>对应的接口，与引用的使用一样。</td></tr><tr><td>引用</td><td>弱关系</td></tr></tbody></table><p><strong>弱关系</strong></p><ol><li>若A被页面编码引用，则表示A的上文；格式为“（上文）【入口】+ 标题”</li><li>若A与页面编码存在关系，则表示A的下文；格式为“（下文）【出口】+ 标题”</li></ol><p><strong><em>A提示和B提示说明应在原型设计加以说明。</em></strong></p><blockquote><p>示例</p><ul><li>标题：WEB-登录页面</li><li>名称：/Login</li><li>页面：Views/Login/Login.html</li><li>原型：WEB-登录页面</li><li>附件：无</li><li>描述：填写登录信息登陆账号、登陆密码，点击【登陆】按钮<ol><li>若登陆信息验证通过，则提交系统；    <ul><li>若登陆信息正确，则页面转向系统首页；</li><li>若登陆信息有误，则B提示错误信息：<ol><li>【登陆账号不存在】</li><li>【该账号已被停用，请与管理员联系】</li><li>【登陆密码错误】</li></ol></li></ul></li><li>若登陆信息验证不通过，则A提示验证信息：<ul><li>【登陆账号不能为空】</li><li>【登陆密码不能为空】</li></ul></li></ol></li><li>引用：<ol><li>（下文）【出口】WEB-系统首页</li></ol></li><li>接口：如下表</li></ul></blockquote><p><strong>接口</strong></p><table><thead><tr><th>通讯接口</th><th>子模块</th><th>系统模块</th><th>备注</th></tr></thead><tbody><tr><td>登录</td><td>登录管理</td><td>系统安全</td></tr></tbody></table><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端编码，依据页面可视元素和操作，编写系统操作步骤及页面说明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/
      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 通讯场景</title>
    <link href="/2017/11/06/sdp-communication-scene/"/>
    <id>/2017/11/06/sdp-communication-scene/</id>
    <published>2017-11-06T03:11:00.000Z</published>
    <updated>2017-11-06T12:27:38.866Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 通讯接口</title>
    <link href="/2017/11/06/sdp-communication-interface/"/>
    <id>/2017/11/06/sdp-communication-interface/</id>
    <published>2017-11-06T03:10:49.000Z</published>
    <updated>2017-11-06T12:27:38.866Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 数据库表</title>
    <link href="/2017/11/06/sdp-datatable/"/>
    <id>/2017/11/06/sdp-datatable/</id>
    <published>2017-11-06T03:10:30.000Z</published>
    <updated>2017-11-06T12:27:39.116Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 数据库设计</title>
    <link href="/2017/11/06/sdp-database-design/"/>
    <id>/2017/11/06/sdp-database-design/</id>
    <published>2017-11-06T03:10:16.000Z</published>
    <updated>2017-11-06T12:27:38.898Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 系统功能</title>
    <link href="/2017/11/06/sdp-system-function/"/>
    <id>/2017/11/06/sdp-system-function/</id>
    <published>2017-11-06T03:09:56.000Z</published>
    <updated>2017-11-06T12:27:39.304Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 系统子模块</title>
    <link href="/2017/11/06/sdp-system-sub-module/"/>
    <id>/2017/11/06/sdp-system-sub-module/</id>
    <published>2017-11-06T03:09:49.000Z</published>
    <updated>2017-11-06T12:27:39.366Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 系统模块</title>
    <link href="/2017/11/06/sdp-system-module/"/>
    <id>/2017/11/06/sdp-system-module/</id>
    <published>2017-11-06T03:09:29.000Z</published>
    <updated>2017-11-06T12:27:39.320Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>努力编写中。。。。。。</p><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;努力编写中。。。。。。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 原型设计</title>
    <link href="/2017/11/06/sdp-model-design/"/>
    <id>/2017/11/06/sdp-model-design/</id>
    <published>2017-11-06T03:09:03.000Z</published>
    <updated>2017-11-06T14:33:33.930Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>名字其实 Prototype Design 更适合，管理项目启动初期，为响应需求而设计的系统原型图<strong>草稿</strong>。</p><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>分类（可选，如APP/WEB-）+界面名称+后缀（可选，_v1.0）</td></tr><tr><td>名称</td><td>英文</td></tr><tr><td>附件</td><td>具体的界面设计，主要以图片为主，可上传多个</td></tr><tr><td>描述</td><td>介绍界面的主要元素以及各个元素的输入格式、<br>验证方式或者元素的点击事件可能发生的情况。<br>描写该页面的操作，主要用于生成操作文档</td></tr><tr><td>引用</td><td>弱关系，展示应当按照引用顺序排序</td></tr></tbody></table><p><strong>引用</strong></p><ol><li>若A与业务用例【需求】存在关系，则表示A的下文；格式为“（下文）【需求】+ 标题”</li><li>若A被原型设计引用，则表示A的上文；格式为“（上文）【入口】+ 标题”</li><li>若A与原型设计存在关系，则表示A的下文；格式为“（下文）【出口】+ 标题”</li></ol><blockquote><p>示例</p><ul><li>标题：WEB-登录页面</li><li>名称：Login</li><li>附件：《基准地价定级计算系统登录界面》</li><li>描述：<ol><li>元素描述：输入框有账户和密码，登录按钮，密码采用掩码的方式显示。</li><li>元素验证：账户和密码为必填项，统一采用提交时（登录）验证。<del>账户若未填写账户，提示【账户不能为空】。密码若未填写密码，则提示【登录密码不能为空】。</del>验证提示统一采用输入框样式改变的提示方式。</li><li>元素事件：登录按钮—若登录不成功，则弹出框提示用户不成功原因。登录成功直接跳转到首页。</li></ol></li><li>操作说明：用户打开系统访问地址，进入到系统登录界面，输入账号和密码，点击登录按钮，登录成功则直接跳转到系统首页，不成功则提示用户不成功信息。</li><li>引用：<ol><li>（下文）【出口】WEB-系统首页</li></ol></li></ul></blockquote><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;名字其实 Prototype Design 更适合，管理项目启动初期，为响应需求而设计的系统原型图&lt;strong&gt;草稿&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;
      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 用户故事</title>
    <link href="/2017/11/06/sdp-user-story/"/>
    <id>/2017/11/06/sdp-user-story/</id>
    <published>2017-11-06T03:07:28.000Z</published>
    <updated>2017-11-06T14:04:05.403Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>用户故事、需求详情、修改详情，细化业务用例内容，拆分每一项内容作为独立的工作登记记录，可以理解为任务分解。</p><h3 id="需求详情-Requirement-Detail"><a href="#需求详情-Requirement-Detail" class="headerlink" title="需求详情 - Requirement Detail"></a>需求详情 - Requirement Detail</h3><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>需求项</td></tr><tr><td>展示</td><td>分类+标题</td></tr><tr><td>分类</td><td>【需求】，标题的前缀，SDP系统提供选项</td></tr><tr><td>名称</td><td>英文或yyyyMMdd-01</td></tr><tr><td>描述</td><td>1）客户对该需求项的描述。<br>2）需求分析师对需求的理解和响应</td></tr><tr><td>引用</td><td>弱关系</td></tr></tbody></table><p><strong>需求项</strong><br>需求文档具体的每项需求应当记录一个用户故事；另外需求分为【功能性需求】和【非功能性需求】，非功能型需求指响应时间等，建议在标题前缀添加【功能】与【非功能】标识</p><p><strong>弱关系</strong></p><ol><li>若A与业务用例存在关系，则表示A的上文；格式为“（上文）【需求】业务用例-标题”</li><li>若A与用户故事存在关系，则表示A的下级；格式为“（下文）【需求】【功能】用户故事-标题”</li><li>若A与系统功能存在关系，则表示A的下级；格式为“（下文）系统功能-标题”</li></ol><blockquote><p>示例1</p><ul><li>标题：【需求】【功能】网格点分值计算</li><li>名称：20171106-01</li><li>描述：网格点是由网格大小将定级范围划分；分值计算是由因子树、计算方式按用途（商业、住宅、办公）分别计算各种用途下每个网格点的分值；因子树是由外部ArgGis工具制作图层shp文件导入。</li><li>引用：<ol><li>（上文）【需求】业务用例-基准地价定级计算系统需求20171021</li><li>（下文）【需求】【功能】因子因素体系及图层管理</li></ol></li></ul></blockquote><p>用户故事【需求】还存在关键字说明，如上例的因子、图层。</p><blockquote><p>示例2</p><ul><li>标题：【需求】关键字说明</li><li>名称：Keyword</li><li>描述：<ol><li>因子…</li><li>因素…</li><li>图层…</li></ol></li><li>引用：无</li></ul></blockquote><h3 id="修改详情-Change-Detail"><a href="#修改详情-Change-Detail" class="headerlink" title="修改详情 - Change Detail"></a>修改详情 - Change Detail</h3><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>修改项，参照“用户故事【需求】，标题”<br>应当严格按照引用业务用例划分为【修改】</td></tr><tr><td>名称</td><td>英文</td></tr><tr><td>描述</td><td>资料文件</td></tr><tr><td>引用</td><td>参照“用户故事【修改】”</td></tr></tbody></table><h3 id="用户故事-User-Story"><a href="#用户故事-User-Story" class="headerlink" title="用户故事 - User Story"></a>用户故事 - User Story</h3><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>执行者/业务工人/业务实体+场景概述</td></tr><tr><td>名称</td><td>英文</td></tr><tr><td>故事</td><td>叙述现状和改进，现状将严格依据客户当前实际情况。<br>改进将采用步骤方式说明执行者、业务工人、<br>业务实体和待研发系统之间是如何协调以完成工作。</td></tr><tr><td>引用</td><td>参照《用户故事【需求】》</td></tr></tbody></table><p><strong>标题</strong></p><ol><li>业务工人， 与系统直接打交道的组织内的人</li><li>业务实体， 非人，系统、时间等</li><li>场景概述，概述故事</li></ol><blockquote><p>示例</p><ul><li>标题：【业务】数据人员计算网格点分值成果</li><li>名称：Data manager get grid point score result</li><li>描述：<ol><li>数据人员建立因子树</li><li>数据人员导入图层</li><li>数据人员建立网格</li><li>数据人员提交计算方式</li><li>系统计算并记录网格点分值</li><li>数据人员下载网格点分值成果shp</li></ol></li><li>引用：<ol><li>（上文）【业务】评估部门获取网格点分值成果</li><li>（下文）【业务】数据人员建立因子树</li><li>（下文）【业务】数据人员导入图层</li><li>（下文）【业务】数据人员建立网格</li><li>（下文）【业务】数据人员提交计算方式</li><li>（下文）【业务】系统计算并记录网格点分值</li></ol></li></ul></blockquote><p><strong>（下文）【业务】数据人员建立因子树</strong></p><blockquote><p>示例：</p><ul><li>标题：【业务】数据人员建立因子树</li><li>名称：Data manager build factor tree</li><li>描述：（假设不存在现状，直接叙述故事步骤）<ol><li>数据人员添加因素和因子</li><li>数据人员修改因素和因子</li><li>数据人员删除错误因素和因子</li><li>数据人员验证因子数据</li><li>略</li></ol></li><li>引用：<ol><li>（上文）【业务】数据人员计算网格点分值成果</li></ol></li></ul></blockquote><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用户故事、需求详情、修改详情，细化业务用例内容，拆分每一项内容作为独立的工作登记记录，可以理解为任务分解。&lt;/p&gt;
&lt;h3 id=&quot;需求详情-Requirement-
      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 业务用例</title>
    <link href="/2017/11/06/sdp-usecase/"/>
    <id>/2017/11/06/sdp-usecase/</id>
    <published>2017-11-06T03:06:49.000Z</published>
    <updated>2017-11-06T12:27:40.116Z</updated>
    
    <content type="html"><![CDATA[<p><a href="../sdp-index/index.html">sdp 索引导航</a></p><p>业务用例、需求汇总文档、修改汇总文档、会议记录文档、聊天记录文档，所有由客户提出需求相关的汇总资料。<br>业务用例必须结合用户故事一起说明，本章介绍业务用例。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ol><li>弱关系：表示SDP各个模块间基于表示任意组合的一种关联。</li><li>上下文：表示引用和包含，也理解为父子或链式关系；上文表示引用，下文表示包含。</li></ol><h3 id="使用场景划分"><a href="#使用场景划分" class="headerlink" title="使用场景划分"></a>使用场景划分</h3><ul><li><p><strong>客户提供需求资料文档</strong><br>  客户提供具体待研发系统的需求资料，项目负责人需要按照客户提供的需求问题进行响应，这种情况下，必须以【需求】为主导开展工作（项目）。应当将严格按照需求资料内容在SDP系统详细记录，具体要求如下：</p><ol><li>相关需求资料文档登记为一个【业务用例】，分类标记【需求】</li><li>进入研发阶段以后，客户再次提供任何资料或反馈建议，每次都必须登记为一个【业务用例】，分类标记【修改】</li><li>用户故事的标记中，【需求】和【修改】是针对资料文档每一项进行详细记录，主要目的有：响应用户需求和反馈（工作量评估）、衡量是否完成标准。</li></ol></li><li><p><strong>自主研发系统</strong><br>  业务用例和用户故事以【业务】为主，基于故事开展工作（SDP、基准地价）。应当将严格按照需求资料内容在SDP系统详细记录，具体要求如下：</p><ol><li>分析待研究组织、业务执行者和用例，则每个系统卖点登记为一个【业务用例】，分类标记【业务】，业务用例必须有具体执行者。</li><li>用户故事的【业务】是对业务用例的详细描述，必须结合现状和改进场景加以阐述。</li><li>用户故事主要目的是响应用户需求和反馈（工作量评估）、衡量是否完成标准。</li></ol></li><li><p><strong>协助客户共同编写需求</strong><br>  需求人员协助客户共同对待研发系统深入研究，可以【业务】和【需求】为主导开展工作，具体有双方协商（如准备开展的土地出让项目）。此类情况按应当结合上述1、2两点开展工作。</p></li></ul><blockquote><p>总结<br>业务用例和用户故事具体标记分为三类：<strong>需求、修改、业务</strong>，存在一一对应关系。需求和修改主要是为了面对客户，由系统自动生产相关响应文档《需求设计文档》，结合系统功能可另外生成《系统功能需求文档》《系统研发工作量评估》。业务主要便于研发人员从业务角度理解待研发系统在实际工作中具体起到的作用，通过现状和改进后得到体现。</p></blockquote><h3 id="需求汇总-Requirement"><a href="#需求汇总-Requirement" class="headerlink" title="需求汇总 - Requirement"></a>需求汇总 - Requirement</h3><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>文档名称</td></tr><tr><td>名称</td><td>英文，【REQ】 – yyyyMMdd</td></tr><tr><td>业务角色</td><td>以下所有都改为分类</td></tr><tr><td>附件</td><td>具体资料及文档，可上传多个</td></tr><tr><td>需求</td><td>介绍资料背景，如获取时间、谁提供、如何获取、<br>个人对于需求理解，以助于日后将场景还原，<br>例如需求会议记录概要。</td></tr><tr><td>引用</td><td>弱关系</td></tr></tbody></table><p><strong>标题</strong></p><ol><li>展示：分类+标题。</li><li>分类：【需求】，标题的前缀，SDP系统提供选项。</li><li>文档：后缀添加年月日yyyyMMdd，也可添加版本号_v1.0。</li></ol><p><strong>引用</strong></p><ol><li>若A与业务用例存在关系，则表示A的下文；格式为“（下文）【需求】业务用例-标题”。</li><li>若A与用户故事存在关系，则表示A的下文；格式为“（下文）【需求】用户故事-标题”。</li><li>展示应当按照引用顺序排序。</li></ol><blockquote><p>示例</p><ul><li>标题：【需求】基准地价定级计算系统需求20171021</li><li>名称：【REQ】- 20171021</li><li>附件：《基准地价定级计算系统需求规格说明书》</li><li>描述：2017-10-21由提供，该需求文档经过双方两次远程视频会议及多次QQ沟通。</li><li>引用：无</li></ul></blockquote><h3 id="修改汇总-Change"><a href="#修改汇总-Change" class="headerlink" title="修改汇总 - Change"></a>修改汇总 - Change</h3><p>进入编码阶段后，任何新需求和反馈问题全部统一视为【修改】</p><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>文档名称，参照“业务用例【需求】，标题”</td></tr><tr><td>名称</td><td>英文，【CHG】 – yyyyMMdd</td></tr><tr><td>附件</td><td>资料文件</td></tr><tr><td>描述</td><td>参照“业务用例【需求】，描述”</td></tr><tr><td>引用</td><td>参照“业务用例【需求】，引用”</td></tr></tbody></table><h3 id="业务用例-Use-Case"><a href="#业务用例-Use-Case" class="headerlink" title="业务用例 - Use Case"></a>业务用例 - Use Case</h3><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>标题</td><td>执行者+用例</td></tr><tr><td>执行者</td><td>与待研究组织打交道的人</td></tr><tr><td>待研究组织</td><td>本次系统使用的组织</td></tr><tr><td>用例</td><td>待研究组织的价值</td></tr><tr><td>名称</td><td>英文</td></tr><tr><td>附件</td><td>可不上传</td></tr><tr><td>描述</td><td>简述该用例现状。</td></tr><tr><td>引用</td><td>参照《业务用例【需求】》</td></tr></tbody></table><blockquote><p>示例</p><ul><li>标题：【业务】评估部门获取网格点分值成果</li><li>名称：Appraisal dep get the grid point score result</li><li>附件：无</li><li>描述：因评估部门制作土地等级等价格成果图件，需要评估土地地价，现行是采用网格点价格方式，故需要从数据部门获取到网格点分值以便于计算网格点价格。</li><li>引用：无</li></ul></blockquote><p><a href="../sdp-index/index.html">sdp 索引导航</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;../sdp-index/index.html&quot;&gt;sdp 索引导航&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;业务用例、需求汇总文档、修改汇总文档、会议记录文档、聊天记录文档，所有由客户提出需求相关的汇总资料。&lt;br&gt;业务用例必须结合用户故事一起说明，本章介绍业务用例。&lt;/p
      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>sdp 索引导航</title>
    <link href="/2017/11/06/sdp-index/"/>
    <id>/2017/11/06/sdp-index/</id>
    <published>2017-11-06T03:06:35.000Z</published>
    <updated>2017-11-06T14:11:16.900Z</updated>
    
    <content type="html"><![CDATA[<p>软件流程管理系统，简称 SDP，用于在软件研发中对资源和过程的一套自主研发的管理型系统，该系统还在完善中。</p><p>系统核心是如何结合研发管理，因此必须对研发流程的各个模块标准化，包括如何命名、如何描述、用词标准等。</p><p>以下是各个模块的链接，先占位再完善内容：</p><ol><li><h3 id="Use-Case-业务用例"><a href="#Use-Case-业务用例" class="headerlink" title="Use Case - 业务用例"></a><a href="../sdp-usecase/index.html">Use Case - 业务用例</a></h3><p>业务用例、需求汇总文档、修改汇总文档、会议记录文档、聊天记录文档，所有由客户提出需求相关的汇总资料。</p></li><li><h3 id="User-Story-用户故事"><a href="#User-Story-用户故事" class="headerlink" title="User Story - 用户故事"></a><a href="../sdp-user-story/index.html">User Story - 用户故事</a></h3><p>用户故事、需求详情、修改详情，细化业务用例内容，拆分每一项内容作为独立的工作登记记录，可以理解为任务分解。</p></li><li><h3 id="Sequence-Diagram-时序图"><a href="#Sequence-Diagram-时序图" class="headerlink" title="Sequence Diagram - 时序图"></a>Sequence Diagram - 时序图</h3><p>必须结合用户故事，主要描述业务角色、业务工作和业务实体如何依据时间来协调工作，关注与职责，从而挖掘系统真实的功能。</p></li><li><h3 id="Model-Design-原型设计"><a href="#Model-Design-原型设计" class="headerlink" title="Model Design - 原型设计"></a><a href="../sdp-model-design/index.html">Model Design - 原型设计</a></h3><p>名字其实 Prototype Design 更适合，管理项目启动初期，为响应需求而设计的系统原型图<strong>草稿</strong>。</p></li><li><h3 id="System-Module-系统模块"><a href="#System-Module-系统模块" class="headerlink" title="System Module - 系统模块"></a><a href="../sdp-system-module/index.html">System Module - 系统模块</a></h3><p>以“用”为视角，为系统设计功能菜单便于用户在需求阶段理解系统，此模块多为一级菜单，需要结合系统子模块做进一步完善。</p></li><li><h3 id="System-Sub-Module-系统子模块"><a href="#System-Sub-Module-系统子模块" class="headerlink" title="System Sub Module - 系统子模块"></a><a href="../sdp-system-sub-module/index.html">System Sub Module - 系统子模块</a></h3><p>延续系统模块，细化一级菜单，此模块多为二级菜单，即可视的用户页面。非页面子模块需结合设计分解，但不建议在此系统子模块。</p></li><li><h3 id="System-Function-系统功能"><a href="#System-Function-系统功能" class="headerlink" title="System Function - 系统功能"></a><a href="../sdp-system-function/index.html">System Function - 系统功能</a></h3><p>延续系统子模块，细化用户页面，描述页面加载和功能按钮具体的作用，多为检索和提交操作，非直观可视的无需作为系统功能，如获取数据源。</p></li><li><h3 id="Domain-Model-领域模型"><a href="#Domain-Model-领域模型" class="headerlink" title="Domain Model - 领域模型"></a>Domain Model - 领域模型</h3><p>以“设计”为视角，结合业务知识分解核心领域，如人可分为心肺功能、神经系统等，而不是跑步。</p></li><li><h3 id="Database-Design-数据库设计"><a href="#Database-Design-数据库设计" class="headerlink" title="Database Design - 数据库设计"></a><a href="../sdp-database-design/index.html">Database Design - 数据库设计</a></h3><p>数据库引擎、ORM 技术选型、数据库命名及初始化 SQL。</p></li><li><h3 id="Data-Table-数据库表"><a href="#Data-Table-数据库表" class="headerlink" title="Data Table - 数据库表"></a><a href="../sdp-datatable/index.html">Data Table - 数据库表</a></h3><p>延续数据库中数据表设计，包括字段、备注。</p></li><li><h3 id="Communication-Interface-通讯接口"><a href="#Communication-Interface-通讯接口" class="headerlink" title="Communication Interface - 通讯接口"></a><a href="../sdp-communication-interface/index.html">Communication Interface - 通讯接口</a></h3><p>前端和后端的通讯接口标准和期望正确的系统响应，约定接口输入参数和输出结果，还有验证规则要求，便于前端人员和后端人员编码一致。</p></li><li><h3 id="Communication-Scene-通讯场景"><a href="#Communication-Scene-通讯场景" class="headerlink" title="Communication Scene - 通讯场景"></a><a href="../sdp-communication-scene/index.html">Communication Scene - 通讯场景</a></h3><p>后端编码，依据不同场景下输入参数及测试数据，系统如何响应编写场景说明。</p></li><li><h3 id="Page-Code-页面编码"><a href="#Page-Code-页面编码" class="headerlink" title="Page Code - 页面编码"></a><a href="../sdp-page/index.html">Page Code - 页面编码</a></h3><p>前端编码，依据页面可视元素和操作，编写系统操作步骤及页面说明。</p></li><li><h3 id="Test-Plan-测试计划"><a href="#Test-Plan-测试计划" class="headerlink" title="Test Plan - 测试计划"></a>Test Plan - 测试计划</h3><p>用于检测后端编码不同场景是否按照测试计划所设计方案正确执行。</p></li><li><h3 id="Exception-Record-异常登记"><a href="#Exception-Record-异常登记" class="headerlink" title="Exception Record - 异常登记"></a><a href="../sdp-exception-record/index.html">Exception Record - 异常登记</a></h3><p>测试和编码人员提交系统存在的 BUG 以及其处理结果。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件流程管理系统，简称 SDP，用于在软件研发中对资源和过程的一套自主研发的管理型系统，该系统还在完善中。&lt;/p&gt;
&lt;p&gt;系统核心是如何结合研发管理，因此必须对研发流程的各个模块标准化，包括如何命名、如何描述、用词标准等。&lt;/p&gt;
&lt;p&gt;以下是各个模块的链接，先占位再完善内
      
    
    </summary>
    
      <category term="sdp" scheme="/categories/sdp/"/>
    
    
      <category term="project" scheme="/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>git 学习 3</title>
    <link href="/2017/11/05/git-study-3/"/>
    <id>/2017/11/05/git-study-3/</id>
    <published>2017-11-05T15:04:15.000Z</published>
    <updated>2017-11-06T12:27:38.834Z</updated>
    
    <content type="html"><![CDATA[<p>远程仓库</p><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>GitHub 注册账号并建立 repository，Clone with SSH<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; // 一路回车，使用默认值即可</div></pre></td></tr></table></figure></p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。<br>登陆GitHub，打开“Account settings”，“SSH Keys”页面然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</p><p>首次注意事项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div><div class="line">// 若上述命令失败，请使用一下命令</div><div class="line">git pull origin master --allow-unrelated-histories // 第一次踩雷</div><div class="line">// 可正式推送文件到远程仓库了~~！！</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p><blockquote><p>git vim 保存退出：按下 “ESC” 键，退出编辑模式，切换到命令模式，在命令模式下键入”ZZ”或者”:wq”保存修改并且退出 vi </p><blockquote><p>commit 若不带参数 -m 也会进入 vim</p></blockquote></blockquote><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步</p><h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>远程库已经准备好，用命令 git clone 克隆一个本地库<br>$ git clone git@github.com:[ account name ]/[ repository name ]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;远程仓库&lt;/p&gt;
&lt;h3 id=&quot;添加远程库&quot;&gt;&lt;a href=&quot;#添加远程库&quot; class=&quot;headerlink&quot; title=&quot;添加远程库&quot;&gt;&lt;/a&gt;添加远程库&lt;/h3&gt;&lt;p&gt;GitHub 注册账号并建立 repository，Clone with SSH&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="tool" scheme="/categories/tool/"/>
    
    
      <category term="git" scheme="/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习 2</title>
    <link href="/2017/11/05/git-study-2/"/>
    <id>/2017/11/05/git-study-2/</id>
    <published>2017-11-05T13:21:11.000Z</published>
    <updated>2017-11-05T14:32:02.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本地版本库-repository"><a href="#本地版本库-repository" class="headerlink" title="本地版本库 - repository**"></a>本地版本库 - repository**</h3><p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 在目录右键选择 git bash</div><div class="line">$ git init                              // 初始化 git 仓库</div><div class="line">$ git add &quot;readme.txt&quot;                  // 添加文件到 git 仓库</div><div class="line">//$ git add &quot;r1.txt&quot; &quot;r2.txt&quot;           // 添加多个文件到 git 仓库</div><div class="line">$ git commit -m &quot;wrote a readme file&quot;   // 提交到仓库</div><div class="line">$ git status                            // 查看工作区状态</div><div class="line">$ git diff                              // 查看修改内容</div><div class="line">$ git add &quot;readme.txt&quot;</div><div class="line">$ git status</div><div class="line">$ git commit -m &quot;add distributed&quot;</div><div class="line">$ git add &quot;readme.txt&quot;</div><div class="line">$ git commit -m &quot;append GPL&quot;</div><div class="line">$ git log                         // 查看提交日记</div><div class="line">$ git log --pretty=oneline        // 查看提交日记，简化信息</div><div class="line">$ git reset --hard HEAD^          // 退回一个版本，^^两个版本，~100一百个版本</div><div class="line">$ git reset --hard [commit_id]    // 恢复某一提交版本</div><div class="line">$ git reflog                      // 查看命令历史</div><div class="line"></div><div class="line">$ git diff HEAD -- readme.txt     // 查看工作区和版本库里面最新版本的区别</div></pre></td></tr></table></figure><h3 id="工作区和暂缓区"><a href="#工作区和暂缓区" class="headerlink" title="工作区和暂缓区"></a>工作区和暂缓区</h3><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><ul><li><p>工作区 - Working Directory<br>电脑能看到的目录</p></li><li><p>版本库 - Repository<br>工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。<br>Git 的版本库里存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。</p><blockquote><p><strong>add</strong> 命令实际是将要提交的所有修改放到暂存区（Stage），然后使用 <strong>commit</strong> 一次性把暂存区的所有修改提交到分区。</p></blockquote></li></ul><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>如果不 add 到暂存区，那就不会加入到 commit 中。<br>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit（因第二次修改没有放入暂存区，所以第二次的修改不会被提交）<br>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- readme.txt    // 撤销修改</div><div class="line">$ git reset HEAD readme.txt     // 提交到暂存区使用 reset 命令，然后 checkout</div></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>若 commit 删除需要还原，请使用 git reset 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git rm test.txt</div><div class="line">// 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</div><div class="line">$ git checkout -- test.txt</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本地版本库-repository&quot;&gt;&lt;a href=&quot;#本地版本库-repository&quot; class=&quot;headerlink&quot; title=&quot;本地版本库 - repository**&quot;&gt;&lt;/a&gt;本地版本库 - repository**&lt;/h3&gt;&lt;p&gt;什么是版本库
      
    
    </summary>
    
      <category term="tool" scheme="/categories/tool/"/>
    
    
      <category term="git" scheme="/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习</title>
    <link href="/2017/11/05/git-study/"/>
    <id>/2017/11/05/git-study/</id>
    <published>2017-11-05T09:19:15.000Z</published>
    <updated>2017-11-05T13:33:01.140Z</updated>
    
    <content type="html"><![CDATA[<p>推荐<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网 Git教程</a></p><p>Git 的由来不多说，只有一句</p><blockquote><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p></blockquote><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p><h3 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h3><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><ol><li><p>CVS/SVN<br>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p></li><li><p>收费<br>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p></li><li><p>VSS<br>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p></li><li><p>Git<br>分布式版本控制系统除了Git以及促使Git诞生的BitKeeper外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推荐&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰的官方网 Gi
      
    
    </summary>
    
      <category term="tool" scheme="/categories/tool/"/>
    
    
      <category term="git" scheme="/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>markdown 语言学习 2</title>
    <link href="/2017/11/02/markdown-course-2/"/>
    <id>/2017/11/02/markdown-course-2/</id>
    <published>2017-11-02T14:39:31.000Z</published>
    <updated>2017-11-02T15:03:50.882Z</updated>
    
    <content type="html"><![CDATA[<p>本章主要介绍前端 MarkDown 解释脚本 showdown 的使用和<strong>坑</strong>。</p><p>git 地址 <a href="https://github.com/showdownjs/showdown" target="_blank" rel="external">showdown.js</a></p><p>cdn 地址 </p><ul><li><a href="https://cdn.bootcss.com/showdown/1.7.6/showdown.js" target="_blank" rel="external">cdn showdown 1.7.6 源码</a></li><li><a href="https://cdn.bootcss.com/showdown/1.7.6/showdown.min.js" target="_blank" rel="external">cdn showdown 1.7.6 压缩</a></li></ul><p>直接上代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function compile()&#123;</div><div class="line">  // 获取要转换的文字</div><div class="line">  var text = document.getElementById(&quot;markdown&quot;).value;</div><div class="line">  // 创建实例</div><div class="line">  var converter = new showdown.Converter();</div><div class="line">  // 支持表格转换</div><div class="line">  converter.setOption(&apos;tables&apos;, true);</div><div class="line">  // 进行转换</div><div class="line">  var html = converter.makeHtml(text);</div><div class="line">  // 展示到对应的地方  result便是id名称</div><div class="line">  document.getElementById(&quot;html-shower&quot;).innerHTML = html;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="git-wiki-链接"><a href="#git-wiki-链接" class="headerlink" title="git wiki 链接"></a>git wiki 链接</h3><ul><li><a href="https://github.com/showdownjs/showdown/wiki" target="_blank" rel="external">Showdown</a></li><li><a href="https://github.com/showdownjs/showdown/wiki/Showdown-options" target="_blank" rel="external">Showdown Options</a></li></ul><h3 id="表格支持的大坑"><a href="#表格支持的大坑" class="headerlink" title="表格支持的大坑"></a>表格支持的大坑</h3><blockquote><p>一定要用两个 “–”，保证不要有空行，其他格式都不重要，为兼容考虑建议习惯“–”就好</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| table | column   | type   |</div><div class="line">| --    | --       | --     |</div><div class="line">| User  | UserName | string |</div><div class="line">| Role  | RoleName | string |</div></pre></td></tr></table></figure><p>效果<br>| table | column   | type   |<br>| –    | –       | –     |<br>| User  | UserName | string |<br>| Role  | RoleName | string |</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本章主要介绍前端 MarkDown 解释脚本 showdown 的使用和&lt;strong&gt;坑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;git 地址 &lt;a href=&quot;https://github.com/showdownjs/showdown&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="script" scheme="/tags/script/"/>
    
      <category term="md" scheme="/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Simple.Data 关于视图使用</title>
    <link href="/2017/11/02/Simple-Data-about-view-use/"/>
    <id>/2017/11/02/Simple-Data-about-view-use/</id>
    <published>2017-11-02T03:51:21.000Z</published>
    <updated>2017-11-02T14:15:16.833Z</updated>
    
    <content type="html"><![CDATA[<p>Simple.Data 分页必须依赖数据表的主键，否则抛异常 AdoAdapterException 【Cannot apply paging to table with no primary key.】</p><p>基于数据查询性能考虑，我们会建立视图简化查询语句，也就是创建 view 对象，但视图是无法拥有主键，所以提出以下方案。</p><p>参考原有分页方法，为表建立排序字段 【<em>#</em>】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ROW_NUMBER() OVER(&#123;0&#125;) AS [_#_]  // &#123;0&#125; 字段名称 + 排序</div><div class="line">// CreateTime 降序</div><div class="line">ROW_NUMBER() OVER(CreateTime desc) AS [_#_]</div></pre></td></tr></table></figure></p><p>因此视图的建立应该指派其排序方式，分页编码使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var pageRange = (offset + 1).to(offset + limit);</div><div class="line">expression = expression.And(limit &gt; 0, () =&gt; view[&quot;_#_&quot;] == pageRange);</div></pre></td></tr></table></figure></p><p>但此方法不可添加查询条件，否则排序结果因筛选数据而导致失效</p><p><strong>特殊情况</strong><br>between and 排序功能失效，原因未能确认<br>暂时只能使用 Linq 重新排序，要么修改 Simple.Data 分页处理，在条件后增加 order by</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Simple.Data 分页必须依赖数据表的主键，否则抛异常 AdoAdapterException 【Cannot apply paging to table with no primary key.】&lt;/p&gt;
&lt;p&gt;基于数据查询性能考虑，我们会建立视图简化查询语句，也就
      
    
    </summary>
    
      <category term="database" scheme="/categories/database/"/>
    
    
      <category term="Simple.Data" scheme="/tags/Simple-Data/"/>
    
  </entry>
  
  <entry>
    <title>Simple.Data 使用建议</title>
    <link href="/2017/10/31/Simple-Data-suggest-for-use/"/>
    <id>/2017/10/31/Simple-Data-suggest-for-use/</id>
    <published>2017-10-31T12:43:42.000Z</published>
    <updated>2017-10-31T15:02:44.802Z</updated>
    
    <content type="html"><![CDATA[<p>实际使用 Simple.Data 依然存在一些问题需要注意，还有一些使用经验分析<br>Simple.Data 使用动态类型可以忽略大小写，但建议采用 C# 规范保持首字母大写</p><h2 id="加载关联对象"><a href="#加载关联对象" class="headerlink" title="加载关联对象"></a>加载关联对象</h2><p>数据库存在表 Node，字段有 No 和 ParentNo，No 是主键，ParentNo 是外键关联表 Node 的 No，即自身引用</p><ul><li><p>定义节点</p><p>定义数据类和对象类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 节点数据表类</div><div class="line">public class Node</div><div class="line">&#123;</div><div class="line">  public string No &#123; get; set; &#125;        // 当前节点编号</div><div class="line">  public string ParentNo &#123; get; set; &#125;  // 上级节点编号</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 节点对象类</div><div class="line">public class NodeObject</div><div class="line">&#123;</div><div class="line">  public string No &#123; get; set; &#125;          // 当前节点编号</div><div class="line">  public NodeObject Parent &#123; get; set; &#125;  // 上级节点对象</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>检索节点</p><p>变量 db 表示数据库对象实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var no = &quot;001&quot;;</div><div class="line">var getToDynamic = db.Node.Get(no);        // dynamic</div><div class="line">var getByTemplate = db.Node.Get&lt;Node&gt;(no); // dynamic，实际类型 Node</div><div class="line">Node getToNode = db.Node.Get&lt;Node&gt;(no);    // Node</div></pre></td></tr></table></figure><p>dynamic 类型转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var nodeByStrong = (Node)getToDynamic;  // 强类型转换 Node</div><div class="line">Node nodeByDefined = getToDynamic;      // 定义转换实体 Node</div><div class="line">string parentNo = getToDynamic.ParentNo;   // dynamic 获取属性</div><div class="line">//string parentNo = nodeByStrong.ParentNo; // 实际类型获取属性</div></pre></td></tr></table></figure><p>读取上级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* 存在外键可通过表名获取 SimpleQuery，再获取数据对象</div><div class="line"> * 原理是 SimpleRecord 分析外键获取 SimpleQuery</div><div class="line"> * SimpleQuery 对象使用部分命令，如：OrderBy/Select 等</div><div class="line"> * 但因存在 Where 命令，暂时为止如何使用重写 Where </div><div class="line"> */</div><div class="line">var parentByDynamic = getToDynamic.Node.FirstOrDefault();</div><div class="line">var gradeParent = getToDynamic.Node.Node.FirstOrDefault(); // 待测试</div><div class="line"></div><div class="line">/* 通过上级节点对象获取编号</div><div class="line"> * 通过属性获取上级节点编号</div><div class="line"> */</div><div class="line">Assert.AreEqual(parentByDynamic.No, getToDynamic.ParentNo); // true</div><div class="line">Assert.AreEqual(gradeParent.No, parentByDynamic.ParentNo);  // true</div></pre></td></tr></table></figure><p>节点对象使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// NodeObject，可以使用 var 定义，注意不可 Get&lt;NodeObject&gt;，否则 Node 没有值</div><div class="line">dynamic nodeObject1 = db.Node.With(db.Node).Get(no);</div><div class="line">// 相当于：dynamic nodeObject1 = db.Node.WithNode().Get(no);</div><div class="line"></div><div class="line">// NodeObject，可以使用 var 或 dynamic 定义，若不使用 As 则无法赋值 Parent</div><div class="line">NodeObject nodeObject2 = db.Node.With(db.Node.As(&quot;Parent&quot;)).Get(no);</div><div class="line">/* 相当于</div><div class="line"> * dynamic node = db.Node;  // 用一张表情况下建议使用变量，代码更容易理解</div><div class="line"> * NodeObject nodeObject1 = db.Node</div><div class="line"> *   Join(db.Node.As(&quot;Parent&quot;), out parent).On(parent.No == node.ParentNo)</div><div class="line"> *   //.Join(db.Node.As(&quot;Parent&quot;), out parent).On(no: node.ParentNo)</div><div class="line"> *   .With(parent.As(&quot;Parent&quot;))</div><div class="line"> *   .Get(no);</div><div class="line"> */</div><div class="line"></div><div class="line">Assert.AreEqual(nodeObject1.Node.No, nodeObject2.Parent.No)</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际使用 Simple.Data 依然存在一些问题需要注意，还有一些使用经验分析&lt;br&gt;Simple.Data 使用动态类型可以忽略大小写，但建议采用 C# 规范保持首字母大写&lt;/p&gt;
&lt;h2 id=&quot;加载关联对象&quot;&gt;&lt;a href=&quot;#加载关联对象&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="database" scheme="/categories/database/"/>
    
    
      <category term="Simple.Data" scheme="/tags/Simple-Data/"/>
    
  </entry>
  
  <entry>
    <title>sql 日期时间函数</title>
    <link href="/2017/10/30/sql-date-function/"/>
    <id>/2017/10/30/sql-date-function/</id>
    <published>2017-10-30T13:40:40.000Z</published>
    <updated>2017-10-30T13:55:47.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="datediff"><a href="#datediff" class="headerlink" title="datediff"></a>datediff</h2><p><strong>功能</strong>： 返回两个日期之间的间隔<br><strong>语法</strong>： datediff ( date-path, date-expression-1, date-expression-2 )<br><strong>date-part</strong>： year | quarter | month | week | day | hour | minute | second | millisecond<br><strong>date-part 2</strong>： yy/yyyy | qq/q | mm/m | wk/ww | dd,d | hh | mi/n | ss/s | ms | dy/y(年的某一日)</p><h2 id="getdate"><a href="#getdate" class="headerlink" title="getdate"></a>getdate</h2><p><strong>功能</strong>： 返回当前系统日期时间<br><strong>语法</strong>： getdate()</p><h2 id="day、month、year"><a href="#day、month、year" class="headerlink" title="day、month、year"></a>day、month、year</h2><p><strong>功能</strong>： 返回天、月、年</p><h2 id="dateadd"><a href="#dateadd" class="headerlink" title="dateadd"></a>dateadd</h2><p><strong>功能</strong>： 返回增加日期类型后的日期<br><strong>语法</strong>：dateadd ( date-part, number, date )</p><h2 id="datepart"><a href="#datepart" class="headerlink" title="datepart"></a>datepart</h2><p><strong>功能</strong>：返回指定日期类型的值，等同于 day()、month()、year()<br><strong>语法</strong>：datapart ( date-part, date)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;datediff&quot;&gt;&lt;a href=&quot;#datediff&quot; class=&quot;headerlink&quot; title=&quot;datediff&quot;&gt;&lt;/a&gt;datediff&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;： 返回两个日期之间的间隔&lt;br&gt;&lt;strong&gt;语法
      
    
    </summary>
    
      <category term="database" scheme="/categories/database/"/>
    
    
      <category term="collect" scheme="/tags/collect/"/>
    
      <category term="sql" scheme="/tags/sql/"/>
    
  </entry>
  
</feed>
